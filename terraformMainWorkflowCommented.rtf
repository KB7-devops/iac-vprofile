name: "Vprofile IAC"  # Nom de votre pipeline GitLab CI

on:
  push:
    branches:
      - main
      - stage
    paths:
      - terraform/**  # Déclenche la pipeline sur push vers les branches main et stage avec des changements dans le répertoire "terraform/"
  pull_request:
    branches:
      - main
    paths:
      - terraform/**  # Déclenche la pipeline sur une pull request vers la branche main avec des changements dans le répertoire "terraform/"

env:
  # Variables d'environnement pour stocker des informations sensibles
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-2
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: "Apply terraform code changes"  # Nom du job
    runs-on: ubuntu-latest  # Environnement d'exécution

    defaults:
      run:
        shell: bash
        working-directory: ./terraform  # Répertoire de travail par défaut pour les étapes du job

    steps:
      - name: Checkout source code  # Étape pour récupérer le code source du dépôt
        uses: actions/checkout@v4

      - name: Setup Terraform with specified version on the runner  # Étape pour installer Terraform (commentée dans votre exemple)
        uses: hashicorp/setup-terraform@v2
        #with:
        #  terraform_version: 1.6.3

      - name: Terraform init  # Étape pour initialiser Terraform et configurer le backend
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: Terraform format  # Étape pour formater le code Terraform
        id: fmt
        run: terraform fmt -check

      - name: Terraform validate  # Étape pour valider la syntaxe du code Terraform
        id: validate
        run: terraform validate

      - name: Terraform plan  # Étape pour générer un plan Terraform et le sauvegarder dans un fichier
        id: plan
        run: terraform plan -no-color -input=false -out planfile
        continue-on-error: true  # Continuer en cas d'erreur pour permettre des vérifications ultérieures

      - name: Terraform plan status  # Étape qui vérifie si l'étape précédente a échoué et sort avec une erreur si c'est le cas
        if: steps.plan.outcome == 'failure' 
        run: exit 1

      - name: Terraform Apply  # Étape qui déploie l'infrastructure Terraform si le push est effectué sur la branche "main"
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Configure AWS credentials  # Étape pour configurer les informations d'identification AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
    
      - name: Get Kube config file  # Étape pour obtenir le fichier de configuration Kubernetes
        id: getconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Install Ingress controller  # Étape pour installer le contrôleur Ingress Kubernetes sur AWS, mais uniquement si les étapes précédentes ont réussi
        if: steps.apply.outcome == 'success' && steps.getconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.1.3/deploy/static/provider/aws/deploy.yaml
